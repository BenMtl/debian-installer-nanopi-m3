#!/bin/sh -e

. /usr/share/debconf/confmodule

nano_log() {
	logger -t nanopi-bootable "$@"
}

nano_logoutput() {
	log-output -t nanopi-bootable "$@"
}

embed_drv=/dev/mmcblk1
[ -e /dev/mmcblk0 ] && embed_drv=/dev/mmcblk0

# obtain partition, path and fs type of directory containing vmlinuz and initrd
bootmnt=$(mount | sed -e '/on \/target\/boot /!d' | tail -1)
if [ -z "$bootmnt" ]
then
	# no separate mount for /boot
	bootmnt=$(mount | sed -e '/on \/target /!d' | tail -1)
	bootpath=boot/
else
	bootpath=
fi
if [ "$bootmnt" = "${bootmnt#/dev/mmcblk?p}" ]; then
	db_subst nanopi-bootable/boot_not_on_mmc RIGHTDRV "$embed_drv"
	# borrowed from lilo-installer ;)
	curdrv=$(echo $bootmnt | sed 's/\(\/dev\/\(cciss\|ida\)\/c[0-9]d[0-9][0-9]*\|\/dev\/[a-z]\+\).*/\1/')
	db_subst nanopi-bootable/boot_not_on_mmc CURDRV "${curdrv}"
	db_input critical nanopi-bootable/boot_not_on_mmc
	db_go || exit 10 # back up
	exit 1
fi
if [ -z "${bootmnt##* type ext*}" ]; then
	bootfstype=ext4
elif [ -z "${bootmnt##* type vfat *}" ]; then
	bootfstype=fat
else
	db_input critical nanopi-bootable/boot_bad_fstype
	db_go || exit 10 # back up
	exit 1
fi
bootpart=${bootmnt#/dev/mmcblk?p}
bootpart=${bootpart%% *}

db_progress start 0 4 nanopi-bootable/progress_title
db_progress step 1

db_progress info nanopi-bootable/install_initramfs_tools
nano_logoutput apt-install initramfs-tools
db_progress step 1

db_progress info nanopi-bootable/install_kernel
pkgname=$(cd /var/lib/nanopi-bootable && echo linux-image-*.deb)
cp /var/lib/nanopi-bootable/$pkgname /target/tmp
in-target dpkg -i /tmp/$pkgname
rm -f /target/tmp/$pkgname
nano_logoutput ln -sf initrd.img-4.11.6+ /target/boot/initrd.img
nano_logoutput ln -sf vmlinuz-4.11.6+ /target/boot/vmlinuz
nano_logoutput cp /target/usr/lib/linux-image-4.11.6+/nexell/s5p6818-nanopi-m3.dtb /target/boot
db_progress step 1

db_progress info nanopi-bootable/install_uboot
# embedding boot.img on sd card
# on 4.11 kernel the SD appears as /dev/mmcblk1
# on 4.4 as /dev/mmcblk0
# 4.11 kernel does not have /dev/mmcblk0
bootimg=/var/lib/nanopi-bootable/boot.img
nano_log "embedding $bootimg on $embed_drv"
nano_logoutput dd if=$bootimg of=$embed_drv seek=1

loadcmd="${bootfstype}load mmc 0:$bootpart"
# obtain root partition
rootmnt=$(mount | sed -e '/on \/target /!d' -e 's/ .*//' | tail -1)
nano_log "loadcmd=$loadcmd, bootpath=$bootpath, rootmnt=$rootmnt"

# set environment for u-boot
{
	echo "bootargs=console=ttySAC0,115200n8 initrd=0x49000000,0x800000 root=$rootmnt console=tty1"
	# vmlinuz must be unzipped for booti command
	# initrd must be padded with zeros till size provided in "initrd=" parameter
	# otherwise kernel does not use the initrd image
	echo "bootcmd=$loadcmd 0x49000000 ${bootpath}vmlinuz; unzip 0x49000000 0x48000000; mw 0x49000000 0 0x800000; $loadcmd 0x49000000 ${bootpath}initrd.img; $loadcmd 0x4a000000 ${bootpath}s5p6818-nanopi-m3.dtb; booti 0x48000000 - 0x4a000000"
} | /var/lib/nanopi-bootable/ubootenv | nano_logoutput dd of=$embed_drv bs=1k seek=512

db_progress step 1
db_progress stop

