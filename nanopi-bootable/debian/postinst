#!/bin/sh -e

. /usr/share/debconf/confmodule

nano_log() {
	logger -t nanopi-bootable "$@"
}

nano_logoutput() {
	log-output -t nanopi-bootable "$@"
}

# obtain partition, path and fs type of directory containing vmlinuz and initrd
bootmnt=$(mount | sed -e '/on \/target\/boot /!d' | tail -1)
if [ -z "$bootmnt" ]
then
	# no separate mount for /boot
	bootmnt=$(mount | sed -e '/on \/target /!d' | tail -1)
	bootpath=boot/
else
	bootpath=
fi
if [ "$bootmnt" = "${bootmnt#/dev/mmcblk?p}" ]; then
	# borrowed from lilo-installer ;)
	curdrv=$(echo $bootmnt | sed 's/\(\/dev\/\(cciss\|ida\)\/c[0-9]d[0-9][0-9]*\|\/dev\/[a-z]\+\).*/\1/')
	db_subst nanopi-bootable/boot_not_on_mmc CURDRV "${curdrv}"
	db_input critical nanopi-bootable/boot_not_on_mmc
	db_go || exit 10 # back up
	exit 1
fi
if [ -z "${bootmnt##* type ext*}" ]; then
	bootfstype=ext4
elif [ -z "${bootmnt##* type vfat *}" ]; then
	bootfstype=fat
	# make space for kernel from deb package and generated initrd.img
	nano_logoutput rm -f /target/boot/vmlinuz /target/boot/initrd.gz
else
	db_input critical nanopi-bootable/boot_bad_fstype
	db_go || exit 10 # back up
	exit 1
fi
bootmnt=${bootmnt%% *}
bootpart=${bootmnt#/dev/mmcblk?p}
embed_drv=${bootmnt%p${bootpart}}

db_progress start 0 4 nanopi-bootable/progress_title
db_progress step 1

db_progress info nanopi-bootable/install_initramfs_tools
nano_logoutput apt-install initramfs-tools
db_progress step 1

db_progress info nanopi-bootable/install_kernel
pkgname=$(cd /var/lib/nanopi-bootable && echo linux-image-*.deb)
cp /var/lib/nanopi-bootable/$pkgname /target/tmp
in-target dpkg -i /tmp/$pkgname
rm -f /target/tmp/$pkgname
if [ "$bootfstype" = fat ]; then
	nano_logoutput cp -f /target/boot/initrd.img-4.11.6+ /target/boot/initrd.img
	nano_logoutput cp -f /target/boot/vmlinuz-4.11.6+ /target/boot/vmlinuz
else
	nano_logoutput ln -sf initrd.img-4.11.6+ /target/boot/initrd.img
	nano_logoutput ln -sf vmlinuz-4.11.6+ /target/boot/vmlinuz
fi
nano_logoutput cp -f /target/usr/lib/linux-image-4.11.6+/nexell/s5p6818-nanopi-m3.dtb /target/boot
db_progress step 1

db_progress info nanopi-bootable/install_uboot
# embedding boot.img on sd card
# on 4.11 kernel the SD appears as /dev/mmcblk2, emmc as /dev/mmcblk0
bootimg=/var/lib/nanopi-bootable/boot.img

if [ "$embed_drv" = "/dev/mmcblk0" ]; then
	# bl1 image is prepared for loading u-boot from SD
	# booting from emmc: fix MMC drive number in bl1 NSIH header
	printf "\2" | dd of="$bootimg" bs=1 seek=80 conv=notrunc
	loadcmd="${bootfstype}load mmc 0:$bootpart"
else
	loadcmd="${bootfstype}load mmc 1:$bootpart"
fi
nano_log "embedding $bootimg on $embed_drv"
nano_logoutput dd if=$bootimg of=$embed_drv seek=1

# obtain root partition
rootmnt=$(mount | sed -e '/on \/target /!d' -e 's/ .*//' | tail -1)
nano_log "loadcmd=$loadcmd, bootpath=$bootpath, rootmnt=$rootmnt"

# set environment for u-boot
{
	echo "bootargs=console=ttySAC0,115200n8 initrd=0x49000000,0x800000 root=$rootmnt console=tty1"
	echo "stdin=serial"
	echo "stdout=serial,vga"
	echo "stderr=serial,vga"
	# vmlinuz must be unzipped for booti command
	# initrd must be padded with zeros till size provided in "initrd=" parameter
	# otherwise kernel does not use the initrd image
	echo "bootcmd=$loadcmd 0x49000000 ${bootpath}vmlinuz; unzip 0x49000000 0x48000000; mw 0x49000000 0 0x800000; $loadcmd 0x49000000 ${bootpath}initrd.img; $loadcmd 0x4a000000 ${bootpath}s5p6818-nanopi-m3.dtb; booti 0x48000000 - 0x4a000000"
} | /var/lib/nanopi-bootable/ubootenv | nano_logoutput dd of=$embed_drv bs=1k seek=512

db_progress step 1
db_progress stop

